package com.roth.jdbc.meta.util;

public class OracleTypeMap implements DataTypeMap {

	private DataType evalInteger(Integer a, Integer b) {
		return (a < 4) ? DataType.TINYINT
			 : (a < 6) ? DataType.SMALLINT
			 : (a < 10) ? DataType.INT
			 : DataType.BIGINT;
	}
	
	@Override
	public DataType fromDbmsType(String dbmsType, Integer a, Integer b) {
		return switch(dbmsType) {
		case "NUMBER" -> b == null || b == 0 ? evalInteger(a, b) : DataType.DECIMAL;
		case "CHAR" -> DataType.CHAR;
		case "VARCHAR2" -> DataType.VARCHAR;
		case "CLOB" -> DataType.LONGVARCHAR;
		case "BLOB" -> DataType.BLOB;
		case "DATE" -> DataType.DATETIME; // This one's screwy, because there's no way to figure it out without a hint.
		default -> throw new IllegalArgumentException(String.format("Invalid dbmsType value supplied: [%s]", dbmsType));
		};
	}

	@Override
	public String toDbmsType(DataType dataType, Integer a, Integer b, boolean required, boolean autoIncrement) {
		String dbmsType = switch (dataType) { 
		case TINYINT, SMALLINT, INT, BIGINT, DECIMAL -> "DECIMAL";
		case CHAR -> "CHAR";
		case VARCHAR -> "VARCHAR2";
		case LONGVARCHAR -> "CLOB";
		case BLOB -> "BLOB";
		case DATE, DATETIME, TIME -> "DATE";
		};
		String params = "";
		if (a != null)
			params = String.format("(%d)", a);
		if (b != null && b > 0)
			params = params.replace(")", String.format(",%d)", b));
		String req = required && !autoIncrement ? " NOT NULL" : "";
		String auto = autoIncrement ? " GENERATED BY DEFAULT ON NULL AS IDENTITY" : "";
		return dbmsType + params + req + auto;
	}	
}
