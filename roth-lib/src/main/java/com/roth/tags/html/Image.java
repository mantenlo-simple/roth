/*
Copyright 2010 James M. Payne

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
package com.roth.tags.html;

import jakarta.servlet.jsp.JspException;

import com.roth.tags.el.Resource;
import com.roth.base.util.Data;

public class Image extends ActionTag {
	private static final long serialVersionUID = -1277739412609961935L;

	// Attribute Setters
	public void setImageName(String imageName) { setValue("imageName", imageName.toLowerCase()); }
	public void setKeyId(String keyId) { setValue("keyId", keyId); }
	public void setOverlayName(String overlayName) { setValue("overlayName", overlayName.toLowerCase()); }
	public void setCalendar(String calendar) { setValue("calendar", calendar); }
	public void setType(String type) { processType(type); }
	
	// doEndTag
	public int doEndTag() throws JspException {
		if (getValue("imageName") == null)
			throw new JspException("The imageName or type attribute is required.");
		String body = getImage((String)getRemoveValue("imageName"), (String)getRemoveValue("overlayName"));
		print(getAnchor(body));
		release();
		return EVAL_PAGE;
	}
	
	protected void processType(String type) {
		setValue("imageName", type);
		setValue("title", Resource.getString(pageContext, "com/jp/html/resource/image", type));
	}
	
	/**
	 * <b>getImage</b><br><br>
	 * Creates an HTML span element, which contains the named image.
	 * @param imageName - The image to use.
	 * @return the created HTML.
	 */
	public static String getImage(String imageName) { 
		return getImage(imageName, null);
	}
	
	/**
	 * <b>getImage</b><br><br>
	 * Creates an HTML span element, which contains the named image.
	 * @param imageName - The image to use.
	 * @param overlay - An overlay image (generated by getImage), if applicable.
	 * @return the created HTML.
	 */
	public static String getImage(String imageName, String overlayName) {
		return getImage(imageName, overlayName, false, false);
	}
	
	/**
	 * <b>getImage</b><br><br>
	 * Creates an HTML span element, which contains the named image.
	 * @param imageName - The image to use.
	 * @param overlay - An overlay image (generated by getImage), if applicable.
	 * @param padLeft - Whether to place a space to the left of the span.
	 * @param padRight - Whether to place a space to the right of the span.
	 * @return the created HTML.
	 */
	public static String getImage(String imageName, String overlayName, boolean padLeft, boolean padRight) {
		if (Data.isEmpty(imageName)) return "";
		String a = "";
		       a += (padLeft) ? "margin-left: 4px;" : "";
		       a += (padRight) ? "margin-right: 4px;" : "";
		if (padLeft || padRight) a = attr("style", a);
		//String padLeft_ = (padLeft) ? " " : "";
		//String padRight_ = (padRight) ? " " : "";
		return /*padLeft_ +*/ getImage(imageName, overlayName, a);// + padRight_;
	}
	
	public static String getImage(String imageName, String overlayName, String attr) {
		//String class_ = " class=\"jimg j" + imageName + "\"";
		//String overlay = (overlayName == null) ? "" : getImage("overlay_" + overlayName);
		//return tag("span", class_ + Data.nvl(attr), overlay); //"&nbsp;");
		if (overlayName == null)
			return tag("i", attr("class", "fas fa-" + imageName) + Data.nvl(attr), "");
		else
			return tag("i", Data.nvl(attr) + attr("class", "fa-overlay"),
					   tag("i", attr("class", "fas fa-" + imageName), "") +
					   tag("i", attr("class", "fas fa-" + overlayName), "")
					  );
	}
	
	public static String getStackedImage(String baseImageName, String baseStyle, String topImageName, String topStyle) {
		return tag("span", attr("class", "fa-stack"),
					tag("i", attr("class", "fa" + baseStyle + " fa-" + baseImageName + "  fa-stack-1x"), "") +
					tag("i", attr("class", "fa" + topStyle + " fa-" + topImageName + "  fa-stack-1x"), "")
				  );
	}
	
	public static String getStackedImage(String baseImageName, String baseStyle, String topImageName1, String topStyle1, String topImageName2, String topStyle2) {
		return //tag("span", attr("class", "fa-stack"),
					tag("i", attr("class", "fa" + baseStyle + " fa-" + baseImageName + "  fa-stack-1x"), "") +
					tag("i", attr("class", "fa" + topStyle1 + " fa-" + topImageName1 + "  fa-stack-1x"), "") +
					tag("i", attr("class", "fa" + topStyle2 + " fa-" + topImageName2 + "  fa-stack-1x"), "")
				 // )
					;
	}
	@Override
	public String[][] getAttributes() {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public String[] getEntities() {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public String getTemplate() {
		// TODO Auto-generated method stub
		return null;
	}
}